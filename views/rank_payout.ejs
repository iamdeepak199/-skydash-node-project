<!--1.views
      | ->paticals 
               | ->1.HTML&Scrpt
               |   2.Topnavbarwith_Search
               |   3.settingpannel
               |   4.sidebar
               |   5.Userdata Table -------
               |   6.paginatio 
               |   6.Footer---->


<%- include('partials/HTML&Scrpt') %>
  <%- include('partials/Topnavbarwith_Search') %>
    <%- include('partials/settingpannel') %>
      <%- include('partials/sidebar') %>
        <!---------------------------------------------------------------Userdata Table--------------------------------------------------------- -->

        <div class="col-lg-12 grid-margin stretch-card">
          <div class="card">
            <div class="card-body">
              <h4 class="card-title">Royalty Details</h4>
              <div class="scrollable-table" style="overflow-x: auto; width: 100%;">
                <div class="table-responsive" style="min-width: 1200px;">
                  <table id="rankPayoutTable" class="table table-hover" style="width: 100%;">
                    <thead>
                      <tr>
                        <th onclick="sortTable(0)">Sr <span id="arrow-0" class="sort-arrow">▲▼</span></th>
                        <th onclick="sortTable(1)">User ID <span id="arrow-1" class="sort-arrow">▲▼</span></th>
                        <th onclick="sortTable(2)">Rank<span id="arrow-2" class="sort-arrow">▲▼</span></th>
                        <th onclick="sortTable(3)">Amount<span id="arrow-3" class="sort-arrow">▲▼</span></th>
                        <th onclick="sortTable(4)">Date<span id="arrow-4" class="sort-arrow">▲▼</span></th>
                      </tr>
                    </thead>
                    <tbody>
                      <% rank_payout.forEach(function(log) { %>
                        <tr id="row-<%= log.id %>">
                          <td>
                            <%= log.id %>
                          </td>
                          <td data-field-name="user_id">
                            <%= log.user_id %>
                          </td>
                          <td data-field-name="rank">
                            <%= log.rank %>
                          </td>
                          <td data-field-name="amount">
                            <%= log.amount %>
                          </td>
                          <td>
                            <%= log.created_date %>
                          </td>
                        </tr>
                        <% }); %>
                    </tbody>
                  </table>
                </div>
              </div>

            </div>

            <script>

              // Search functionality for filtering table rows
              document.getElementById("navbar-search-input").addEventListener("keyup", function () {
                searchTable();
              });

              // Function to search the table
              function searchTable() {
                const input = document.getElementById("navbar-search-input").value.toUpperCase();
                const table = document.getElementById("rankPayoutTable");
                const tr = table.getElementsByTagName("tr");

                // Loop through all table rows, excluding the header
                for (let i = 1; i < tr.length; i++) {
                  const tds = tr[i].getElementsByTagName("td");
                  let found = false;

                  // Loop through each table cell in the row
                  for (let j = 0; j < tds.length; j++) {
                    if (tds[j]) {
                      if (tds[j].innerText.toUpperCase().indexOf(input) > -1) {
                        found = true; // If match is found
                        break;
                      }
                    }
                  }

                  // Show or hide the row based on search result
                  if (found) {
                    tr[i].style.display = ""; // Show the row if found
                  } else {
                    tr[i].style.display = "none"; // Hide the row if not found
                  }
                }
              }

              let currentSortColumn = -1; // Track the currently sorted column
              let currentSortOrder = 'asc'; // Track the sort order

              function sortTable(columnIndex) {
                const table = document.getElementById("rankPayoutTable");
                const tbody = table.getElementsByTagName("tbody")[0];
                const rows = Array.from(tbody.getElementsByTagName("tr"));

                let direction = 'asc'; // Default direction

                // If the same column is clicked, toggle the sort order
                if (currentSortColumn === columnIndex) {
                  direction = currentSortOrder === 'asc' ? 'desc' : 'asc';
                }

                // Sort rows based on the selected column
                rows.sort((a, b) => {
                  const aText = a.getElementsByTagName("td")[columnIndex].innerText;
                  const bText = b.getElementsByTagName("td")[columnIndex].innerText;

                  let aValue, bValue;

                  // Handle date columns
                  if (columnIndex === 3) { // Assuming "Created Date" is the 4th column
                    aValue = new Date(aText);
                    bValue = new Date(bText);
                  } else {
                    aValue = isNaN(aText) ? aText : parseFloat(aText);
                    bValue = isNaN(bText) ? bText : parseFloat(bText);
                  }

                  if (direction === 'asc') {
                    return aValue > bValue ? 1 : -1;
                  } else {
                    return aValue < bValue ? 1 : -1;
                  }
                });

                // Clear the current tbody and append sorted rows
                tbody.innerHTML = '';
                rows.forEach(row => tbody.appendChild(row));

                // Update current sort column and order
                currentSortColumn = columnIndex;
                currentSortOrder = direction;

                // Update the arrows
                updateArrows();
              }

              function updateArrows() {
                // Clear all arrows
                for (let i = 0; i < 5; i++) {
                  const arrow = document.getElementById(`arrow-${i}`);
                  // Reset arrows to default state
                  arrow.innerHTML = '▲▼'; // Reset arrows to default for all columns
                  arrow.classList.remove('active'); // Remove active class
                }

                // Set the appropriate arrow for the current sorted column and direction
                if (currentSortColumn !== -1) {
                  const arrow = document.getElementById(`arrow-${currentSortColumn}`);
                  arrow.innerHTML = currentSortOrder === 'asc' ? '▲' : '▼'; // Show up or down arrow
                  arrow.classList.add('active'); // Add active class
                }
              }
            </script>

            <style>
              .sort-arrow {
                color: gray;
                /* Default arrow color */
                margin-left: 5px;
                /* Space between text and arrow */
              }

              .sort-arrow.active {
                color: black;
                /* Change color when active */
                font-weight: bold;
                /* Make the arrow bold */
              }
            </style>

            <%- include('partials/pagination') %>
              <%- include('partials/footer') %>